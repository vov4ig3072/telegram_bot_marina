import TelegramBot from "node-telegram-bot-api"
import mongoose from "mongoose"
import dotenv from "dotenv"
import Telegram from './database/schema.js'
import Statistic from './database/statistic.js'
import content from './src/content.json' assert { type: 'json' }
import options from './src/options.js'
dotenv.config()

mongoose.set('strictQuery', true)

const { TOKEN, MONGO_URL, ADMINID} = process.env
const { startOption, infoOption, infoTarifsOptons, academyTarifsOptons, academyOption } = options

const EMAIL_REGEXP = /^[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}$/i
const TELPHONE_REGEXP = /^(\s*)?(\+)?([- _():=+]?\d[- _():=+]?){10,14}(\s*)?$/
const URL_REGEXP = /[-a-zA-Z0-9@:%_\+.~#?&\/=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&\/=]*)?/gi

const statistic = {
    id: null,
    user: {},
    transition: []
}

const user = {}

async function start(){
    try{

        await mongoose.connect(MONGO_URL) 
            
        const bot = new TelegramBot(TOKEN, { polling: true });

        bot.setMyCommands([
            {command: '/start', description: '–ü–æ—á–∞—Ç–∏ –∑–∞—Ä–æ–±–ª—è—Ç–∏üí∞'},
            {command: '/info', description: '–ó —á–æ–≥–æ –ø–æ—á–∞—Ç–∏?ü§î'},
            {command: '/academy', description: 'Freelance Academy UA'},
        ])

        bot.on('message', async msg => {
            const {chat, text} = msg

            statistic.transition.push(text)
            
            if(!Object.keys(statistic.user).length){
                statistic.user = chat
            }

            if(!statistic.id){
                try{
                    const statisticBD = await new Statistic({user: statistic.user, transition: statistic.transition})
                    statisticBD.save()
    
                    statistic.id = statisticBD._id
                }catch (e) {
                    console.log(e);
                }
            }
           
            if(text === '/start'){
                return await bot.sendMessage( chat.id, content.startMessage, startOption )
            }

            if(text === '/info'){
                return await bot.sendMessage(chat.id, content.infoMessage, infoOption)
            }

            if(text === '/academy'){
                return await bot.sendMessage(chat.id, content.academyMessage, academyOption)
            }

            if(EMAIL_REGEXP.test(text) || TELPHONE_REGEXP.test(text) || URL_REGEXP.test(text)){
                user.contact = text

                const telegram = await new Telegram({...user})
                await telegram.save()

                Object.keys(user).forEach(key => delete user[key])

                await bot.sendMessage(chat.id, `–¢–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç: ${text}\n–î—è–∫—É—é, —á–µ–∫–∞–π –º–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üíã`)
                return await bot.sendMessage(ADMINID, `–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${telegram._id}`)
            }else{
                await bot.sendMessage(chat.id, `–¶–µ –Ω–µ —Ç–µ —â–æ –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ üôÉ`)
            }
        })

        bot.on('callback_query', async msg => {
            const data = msg.data
            const id = msg.message.chat.id

            statistic.transition.push(data)

            try{
                await Statistic.findOneAndUpdate({id: statistic.id}, {transition: statistic.transition})
            }catch (e) {
                console.log(e);
            }

            if(data === "/info"){
                return await bot.sendMessage(id, content.infoMessage, infoOption)
            }

            if(data === "/academy"){
                return await bot.sendMessage(id, content.academyMessage, academyOption)
            }

            if(data === "1"){
                return await bot.sendMessage(id, content.academyFirst ,academyTarifsOptons)
            }
            
            if(data === "2"){
                return await bot.sendMessage(id, content.academySecond, academyTarifsOptons)
            }

            if(data === "3"){
                return await bot.sendMessage(id, content.academyThird, academyTarifsOptons)
            }

            if(data === "4"){
                return await bot.sendMessage(id, content.academyFourth, academyTarifsOptons)
            }

            if(data === "order"){
                user.chat = JSON.stringify(msg.message.chat)
                user.content = msg.message.text.split("\n")[0]
                // await bot.sendMessage(ADMINID, `–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: ${JSON.stringify(user.chat)}.\n–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${user.content}`)
                return await bot.sendMessage(id, `–¢–≤—ñ–π –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ‚úÖ –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –≤ –±–æ—Ç—ñ —è–∫ –∑ —Ç–æ–±–æ—é –∑–≤'—è–∑–∞—Ç–∏—Å—è —á–µ—Ä–µ–∑ email, —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Öüì≤üòâ\n–ê–±–æ ‚úçÔ∏è —Ç—É—Çüëá\n https://instagram.com/litvinichevaaa?igshid=YmMyMTA2M2Y=\n`)
            }

            if(data === "content_maker"){
                return await bot.sendMessage(id, content.contentMaker, infoTarifsOptons)
            }

            if(data === "storiesmaker"){
                return await bot.sendMessage(id, content.storiesmaker, infoTarifsOptons)
            }

            if(data === "sales_not_adv"){
                return await bot.sendMessage(id, content.salesNotAdv, infoTarifsOptons)
            }

            if(data === "base_course_visual"){
                return await bot.sendMessage(id, content.baseCourseVisual, infoTarifsOptons)
            }

            if(data === "online_shop"){
                return await bot.sendMessage(id, content.onlineShop, infoTarifsOptons)
            }

            if(data === "mobile_video"){
                return await bot.sendMessage(id, content.mobileVideo, infoTarifsOptons)
            }

            if(data === "stories"){
                return await bot.sendMessage(id, content.stories, infoTarifsOptons)
            }
        })

    }catch (e) {
        console.log(e)
    }
}

start()